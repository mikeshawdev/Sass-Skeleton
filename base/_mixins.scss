/*
|--------------------------------------------------------------------------
| $MIXINS
|--------------------------------------------------------------------------
*/


/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   @include vendor-prefix(border-radius, 4px);
 *
 * @param $property {string}
 * @param $value... {mixed}
 */

@mixin vendor-prefix($property, $value...){
    -webkit-#{$property}: $value;
       -moz-#{$property}: $value;
        -ms-#{$property}: $value;
         -o-#{$property}: $value;
            #{$property}: $value;
}





/**
 * Apply RGBA with an RGB fallback for older browsers, e.g
 *
 * @include rgba(color, rgb(51, 51, 51), 0.8);
 *
 * @param $property {string}
 * @param $rgb      {rgb}
 * @param $opacity  {integer}
 */

@mixin rgba($property, $rgb, $opacity) {
    $red: (1 - $opacity) * red($rgba-background-colour) + $opacity * red($rgb);
    $green: (1 - $opacity) * green($rgba-background-colour) + $opacity * green($rgb);
    $blue: (1 - $opacity) * blue($rgba-background-colour) + $opacity * blue($rgb);

    #{$property}: rgb($red, $green, $blue);
    #{$property}: rgba($rgb, $opacity);
}




/**
 * Provide different vendor prefixes for transitions, e.g
 *
 * @include transition(color, .1s, ease-in-out);
 *
 * @param $property  {string}
 * @param $time      {float}
 * @param $method    {string}
 */

@mixin transition($property, $time, $method) {
    -webkit-transition: $property $time $method;
       -moz-transition: $property $time $method;
        -ms-transition: $property $time $method;
         -o-transition: $property $time $method;
            transition: $property $time $method;
}





/**
 * Provide a PX fallback for sizing with REM, e.g
 *
 * @include rem(font-size, 16px);
 * @include rem(font-size, 2rem);
 *
 * @param $property {string}
 * @param $values   {mixed}
 */

@mixin rem($property, $values) {
    // Create a couple of empty lists as output buffers.
    $px-values: ();
    $rem-values: ();

    // Loop through the $values list
    @each $value in $values {
        // For each property value, if it's in rem or px, derive both rem and
        // px values for it and add those to the end of the appropriate buffer.
        // Ensure all pixel values are rounded to the nearest pixel.
        @if $value == 0 or $value == 0px {
            // 0 -- use it without a unit
            $px-values: join($px-values, 0);
            $rem-values: join($rem-values, 0);
        } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
            // px value given - calculate rem value from font-size
            $new-rem-value: $value / $base-font-size;
            $px-values: join($px-values, round($value));
            $rem-values: join($rem-values, #{$new-rem-value}rem);
        } @else if type-of($value) == number and not unitless($value) and (unit($value) == rem) {
            // rem value given - calculate px value from font-size
            $new-px-value: strip-unit($value) * $base-font-size;
            $px-values: join($px-values, #{$new-px-value});
            $rem-values: join($rem-values, $value);
        } @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
            // % value given - don't add px or rem
            $px-values: join($px-values, #{$value});
            $rem-values: join($rem-values, #{$value});
        } @else if $value == auto {
            // auto - don't add px or rem
            $px-values: join($px-values, auto);
            $rem-values: join($rem-values, auto);
        } @else if $value == !important {
            // !important - don't add px or rem
            $px-values: join($px-values, !important);
            $rem-values: join($rem-values, !important);
        } @else {
            // unitless value - use those directly as rem and calculate the px-fallback
            $px-values: join($px-values, round($value * $base-font-size));
            $rem-values: join($rem-values, #{$value}rem);
        }
    }

    // output the converted rules
    #{$property}: $px-values;
    #{$property}: $rem-values;
}





/**
 * Setup width classes in one swoop, e.g
 *
 * @include grid-setup('mobile-');
 *
 * @param $namespace {string}
 *
 * Credit to Harry Roberts
 * @link http://bit.ly/1gTnXVA
 */

@mixin grid-setup($namespace: "") {
    /**
    * Whole
    */
    .#{$namespace}one-whole         { width:100%; }


    /**
    * Halves
    */
    .#{$namespace}one-half          { width:50%; }


    /**
    * Thirds
    */
    .#{$namespace}one-third         { width:33.333%; }
    .#{$namespace}two-thirds        { width:66.666%; }


    /**
    * Quarters
    */
    .#{$namespace}one-quarter       { width:25%; }
    .#{$namespace}two-quarters      { @extend .#{$namespace}one-half; }
    .#{$namespace}three-quarters    { width:75%; }


    /**
    * Fifths
    */
    .#{$namespace}one-fifth         { width:20%; }
    .#{$namespace}two-fifths        { width:40%; }
    .#{$namespace}three-fifths      { width:60%; }
    .#{$namespace}four-fifths       { width:80%; }


    /**
    * Sixths
    */
    .#{$namespace}one-sixth         { width:16.666%; }
    .#{$namespace}two-sixths        { @extend .#{$namespace}one-third; }
    .#{$namespace}three-sixths      { @extend .#{$namespace}one-half; }
    .#{$namespace}four-sixths       { @extend .#{$namespace}two-thirds; }
    .#{$namespace}five-sixths       { width:83.333%; }


    /**
    * Eighths
    */
    .#{$namespace}one-eighth        { width:12.5%; }
    .#{$namespace}two-eighths       { @extend .#{$namespace}one-quarter; }
    .#{$namespace}three-eighths     { width:37.5%; }
    .#{$namespace}four-eighths      { @extend .#{$namespace}one-half; }
    .#{$namespace}five-eighths      { width:62.5%; }
    .#{$namespace}six-eighths       { @extend .#{$namespace}three-quarters; }
    .#{$namespace}seven-eighths     { width:87.5%; }


    /**
    * Tenths
    */
    .#{$namespace}one-tenth         { width:10%; }
    .#{$namespace}two-tenths        { @extend .#{$namespace}one-fifth; }
    .#{$namespace}three-tenths      { width:30%; }
    .#{$namespace}four-tenths       { @extend .#{$namespace}two-fifths; }
    .#{$namespace}five-tenths       { @extend .#{$namespace}one-half; }
    .#{$namespace}six-tenths        { @extend .#{$namespace}three-fifths; }
    .#{$namespace}seven-tenths      { width:70%; }
    .#{$namespace}eight-tenths      { @extend .#{$namespace}four-fifths; }
    .#{$namespace}nine-tenths       { width:90%; }


    /**
    * Twelfths
    */
    .#{$namespace}one-twelfth       { width:8.333%; }
    .#{$namespace}two-twelfths      { @extend .#{$namespace}one-sixth; }
    .#{$namespace}three-twelfths    { @extend .#{$namespace}one-quarter; }
    .#{$namespace}four-twelfths     { @extend .#{$namespace}one-third; }
    .#{$namespace}five-twelfths     { width:41.666% }
    .#{$namespace}six-twelfths      { @extend .#{$namespace}one-half; }
    .#{$namespace}seven-twelfths    { width:58.333%; }
    .#{$namespace}eight-twelfths    { @extend .#{$namespace}two-thirds; }
    .#{$namespace}nine-twelfths     { @extend .#{$namespace}three-quarters; }
    .#{$namespace}ten-twelfths      { @extend .#{$namespace}five-sixths; }
    .#{$namespace}eleven-twelfths   { width:91.666%; }
}





/**
 * Mixin to setup our type-scale
 *
 * Based upon the type mixin in https://github.com/kenwheeler/guff
 */

@mixin type() {
    $h4-size: round($base-font-size * $base-type-scale);
    $h3-size: round($h4-size * $base-type-scale);
    $h2-size: round($h3-size * $base-type-scale);
    $h1-size: round($h2-size * $base-type-scale);

    h1,
    .h1 {
        @include rem(font-size, $h1-size);
    }

    h2,
    .h2 {
        @include rem(font-size, $h2-size);
    }

    h3,
    .h3 {
        @include rem(font-size, $h3-size);
    }

    h4,
    .h4 {
        @include rem(font-size, $h4-size);
    }
}
