/*
|--------------------------------------------------------------------------
| $TOOLS.FUNCTIONS
|--------------------------------------------------------------------------
*/

/**
 * Strip any units from `$value`
 *
 * @param string $value
 *
 * @return integer
 */
@function strip-units($value) {
    @return $value / ($value * 0 + 1);
}

/**
 * Covert a px value to the rem equivalent
 *
 * @param number $value
 *
 * @return number
 */
@function rem($value) {
    @return ($value / $base-font-size) * 1rem;
}

/**
 * Quarter a given value
 *
 * @param int|float
 *
 * @return int|float
 */
@function quarter ($value) {
    @return $value * .25;
}

/**
 * Halve a given value
 *
 * @param int|float
 *
 * @return int|float
 */
@function halve ($value)
{
    @return $value * .5;
}

/**
 * Double a given value
 *
 * @param int|float
 *
 * @return int|float
 */
@function double ($value) {
    @return $value * 2;
}

/**
 * Quadruple a given value
 *
 * @param int|float
 *
 * @return int|float
 */
@function quadruple ($value) {
    @return $value * 4;
}

/**
 * Convert a list to a string
 *
 * @param list $list
 * @param string $glue
 * @param boolean $is-nested
 *
 * @return string
 *
 * @link http://bit.ly/1wHYOmK
 */
@function to-string($list, $glue: '', $is-nested: false) {
    $result: null;

    @for $i from 1 through length($list) {
        $e: nth($list, $i);

        @if type-of($e) == list {
            $result: unquote("#{$result}#{to-string($e, $glue, true)}");
        } @else {
            $result: if($i != length($list) or $is-nested, unquote("#{$result}#{$e}#{$glue}"), unquote("#{$result}#{$e}"));
        }
    }

    @return $result;
}
